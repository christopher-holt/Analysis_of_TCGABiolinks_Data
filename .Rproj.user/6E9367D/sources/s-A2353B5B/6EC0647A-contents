library(readr)
library(magrittr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(data.table)
library(plotly)
RTCGA_Select_Col <- read_csv("/home/chris-holt/Desktop/TCGA_Gene_Files/RTCGA_Select_Col_1.csv")

Names <- as.character(c('ACC','BLCA', 'BRCA',  'CHOL','COAD', 'COADREAD', 'DLBC', "ESCA", 'GBM', 'HNSC', 'KICH', 'KIRC', 'KIRP',
                        'LAML', 'LGG', 'LIHC', 'LUAD', 'LUSC', 'PAAD', 'PCPG', 'READ', 'SARC', 'SKCM', 'STAD',
                        'THCA', 'THYM', 'UVM'))
Names_Full <- as.character(c('Adrenocortical carcinoma','Bladder urothelial carcinoma', 'Breast invasive carcinoma',
                             'Cholangiocarcinoma','Colon adenocarcinoma','Colorectal adenocarcinoma',
                             'Lymphoid Neoplasm Diffuse Large B-cell Lymphoma','Esophageal carcinoma', 'Glioblastoma multiforme', 
                             'Head and Neck squamous cell carcinoma', 'Kidney Chromophobe', 'Kidney renal clear cell carcinoma',
                             'Kidney renal papillary cell carcinoma', 'Acute Myeloid Leukemia', 'Brain Lower Grade Glioma', 
                             'Liver hepatocellular carcinoma', 'Lung adenocarcinoma', 'Lung squamous cell carcinoma', 
                             'Pancreatic adenocarcinoma', 'Pheochromocytoma and Paraganglioma',
                             'Rectum adenocarcinoma', 'Sarcoma', 'Skin Cutaneous Melanoma',
                             'Stomach adenocarcinoma', 'Thyroid carcinoma', 'Thymoma',
                             'Uveal Melanoma'
))


i = 1

################################################
## This will table the number of gene occurences by patient, then it will multiply the number of people with a mutation in gene Y X number of times
## by that number X for male and female, then perform a t-test for each gene based on those values 

i = 1
for (i in 1:length(Names)){
  Name<-((RTCGA_Select_Col %>% filter(Cancer_Cohort == Names[i] & variant_classification == 'Missense_Mutation' & mutation_status == 'Somatic')
          %>% dplyr::select(hugo_symbol, gender, tumor_barcode)))
  
  Name_M <- subset(Name, gender == 'male')
  Name_F <- subset(Name, gender == 'female')
  
  Name_M_table <- as.data.frame((table(Name_M$hugo_symbol, Name_M$tumor_barcode)))
  Name_F_table <- as.data.frame((table(Name_F$hugo_symbol, Name_F$tumor_barcode)))
  
  Name_M_table$gender <- 'male'
  Name_F_table$gender <- 'female'
  Name_M_table$Cancer <- Names[i]
  Name_F_table$Cancer <- Names[i]
  
  Name_M_table <- Name_M_table %>%  group_by(Var1, Freq) %>% summarise(people=n())
  Name_F_table <- Name_F_table %>%  group_by(Var1, Freq) %>% summarise(people=n())
  
  
  ## This will convert factors to strings
  Name_M_table$Var1 <- type.convert(Name_M_table$Var1, as.is = T)
  Name_F_table$Var1 <- type.convert(Name_F_table$Var1, as.is = T)
  Name_M_table$Cancer <- Names[i]
  Name_M_table$Gender <- 'male'
  
  Name_F_table$Cancer <- Names[i]
  Name_F_table$Gender <- 'female'
  
  
  
  write.csv(Name_M_table,file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_M_table", ".csv")),quote=FALSE,row.names=FALSE)
  write.csv(Name_F_table,file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_F_table", ".csv")),quote=FALSE,row.names=FALSE)
  
  assign(paste(Names[i],sep=''),Name)
  assign(paste(Names[i], '_M',sep=''),Name_M)
  assign(paste(Names[i], '_M_table',sep=''),Name_M_table)
  assign(paste(Names[i], '_F',sep=''),Name_F)
  assign(paste(Names[i], '_F_table',sep=''),Name_F_table)
  
}
## Run Gender_Freq.py

for (i in 1:length(Names)){
  Name_M_table<- read.csv(file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_male_Frequencies", ".csv")), 
                           header = F, stringsAsFactors = F)
  Name_F_table<- read.csv(file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_female_Frequencies", ".csv")), 
                          header = F, stringsAsFactors = F)
  Name_M_table$Gender <- 'male'
  Name_F_table$Gender <- 'female'
  
  Name_merged <- merge(Name_M_table, Name_F_table, by='V1', all = T)
  
  Name_merged$V2.x[is.na(Name_merged$V2.x)] <- 0
  Name_merged$V2.y[is.na(Name_merged$V2.y)] <- 0
  Name_merged$Gender.x[is.na(Name_merged$Gender.x)] <- 'male'
  Name_merged$Gender.y[is.na(Name_merged$Gender.y)] <- 'female'
  
  Name_M_table <- Name_merged %>% select(V1, V2.x, Gender.x)
  Name_F_table <- Name_merged %>% select(V1, V2.y, Gender.y)
  
  Name_M_table <- Name_M_table %>% rename(Var1 = V1, Frequency = V2.x, Gender = Gender.x)
  Name_F_table <- Name_F_table %>% rename(Var1 = V1, Frequency = V2.y, Gender = Gender.y)
  
  Name_merged_order <- rbind(Name_M_table, Name_F_table)
  Name_merged_order <- Name_merged_order[with(Name_merged_order, order(Var1)),]
  
  Name_genes <- unique(Name_merged_order$Var1)
  Name_Genes_pval_2 <- matrix(0,nrow = length(Name_genes), ncol = 2)
  for(j in 1:length(Name_genes)){
    Name_ind_gene <- Name_merged_order %>% filter(Var1 == Name_genes[j])
    Name_A <- try(t.test(Name_ind_gene$Frequency), silent = T)
    if(is(Name_A, "try-error")){
      Name_Genes_pval_2[j,2] <- NA ## NA means that the t.test for that gene failed due to data are essentially constant error
    } else{
      Name_Genes_pval_2[j,2]  <- Name_A$p.value
      
    }
    Name_Genes_pval_2[j,1] = Name_genes[j]
  }
  Name_Genes_pval_2 <- as.data.frame(Name_Genes_pval_2)
  Name_Genes_pval_2$V1 <- type.convert(Name_Genes_pval_2$V1, as.is = T)
  Name_Genes_pval_2$V2 <- type.convert(Name_Genes_pval_2$V2, as.is = T)
  
  
  write.csv(Name_Genes_pval_2,file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_Genes_pval", ".csv")),quote=FALSE,row.names=FALSE)
  
  
  
  assign(paste(Names[i], '_M_table',sep=''),Name_M_table)
  assign(paste(Names[i], '_F_table',sep=''),Name_F_table)
  assign(paste(Names[i], '_merged', sep=''), Name_merged) 
  assign(paste(Names[i], '_merged_order', sep=''), Name_merged_order)  
  assign(paste(Names[i], '_Genes_pval_2',sep=''),Name_Genes_pval_2)
  assign(paste(Names[i], '_ind_gene',sep=''),Name_ind_gene)
  assign(paste(Names[i], '_Name_A',sep=''),Name_A)
  
}
## Up to here works



i = 5
for (i in 1:length(Names)){
  Name_Df <- read.csv(file = file.path("/home/chris-holt/Desktop/Statistics/Gender/Frequencies",paste0(Names[i], "_Genes_pval", ".csv")), 
                      header = T, stringsAsFactors = F)
  Name_Df$Cancer <- Names[i]
  
  jpeg(width = 800, height = 800, file = file.path("/home/chris-holt/Desktop/Statistics/Gender/pValues", paste0(Names[i], "_pVal", ".jpg", sep = " ")))
  d <- density(na.omit(Name_Df$V2))
  plot(d, main = paste('p-value distribution in \n', Names_Full[i]), xlab = 'p-value', xlim = c(-0.15, 0.65))
  dev.off()

}
